{
  "openapi": "3.0.1",
  "info": {
    "title": "Madaster Private API - Build: 17296",
    "description": "Welcome to the **Madaster Private API** endpoint. This endpoint can be used to interact with the Madaster Platform and its resources. This API does not fully cover all functionality of the platform yet, please see below for the available functions and what they can be used for. For detailed information about the platform and this API, please refer to the [Madaster Documentation](https://docs.madaster.com) or the [Madaster API Documentation](https://docs.madaster.com/nl/en/api.html).<br/><br/>To access these resources, you need an authorization token. If you do not have one yet, see the chapter about Authorization in the [API documentation](https://docs.madaster.com/nl/en/api.html). This token should be sent as a header with the name 'X-API-Key', which will authenticate the request with the token. The documentation below specifies which requests are available and which responses they might produce.<br/><br/>This API can be reached at the endpoint: **[https://api.madaster.com/](https://api.madaster.com/)**",
    "contact": {
      "name": "Madaster Services B.V.",
      "url": "https://www.madaster.com",
      "email": "service@madaster.com"
    },
    "version": "v3.0"
  },
  "paths": {
    "/api/v3.0/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Gets the current account for the token",
        "operationId": "Account_GetAccount",
        "responses": {
          "200": {
            "description": "The account for the used token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/account/foldertypes": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Gets the foldertypes for the account",
        "operationId": "Account_GetFolderTypes",
        "responses": {
          "200": {
            "description": "The foldertypes for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building": {
      "get": {
        "tags": [
          "Building"
        ],
        "summary": "Gets all buildings",
        "operationId": "Building_GetBuildings",
        "responses": {
          "200": {
            "description": "The request was successful and will return all buildings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Building"
        ],
        "summary": "Adds a building",
        "operationId": "Building_AddBuilding",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The building was created and the location of the resource will be returned in the 'location' header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{id}": {
      "get": {
        "tags": [
          "Building"
        ],
        "summary": "Gets a building by its identifier",
        "operationId": "Building_GetBuildingById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the building.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Building"
        ],
        "summary": "Replaces a building",
        "operationId": "Building_UpdateBuilding",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The building was replaced in its entirety and the result will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Building"
        ],
        "summary": "Deletes the building and all related data",
        "operationId": "Building_DeleteBuilding",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The building was successfully deleted."
          }
        }
      }
    },
    "/api/v3.0/building/{id}/validation": {
      "get": {
        "tags": [
          "Building"
        ],
        "summary": "Gets building validation parameters",
        "operationId": "Building_GetValidation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The building validation paramaters for the active source files.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingValidation"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{id}/circular": {
      "get": {
        "tags": [
          "Building"
        ],
        "summary": "Gets the circular information of a building",
        "operationId": "Building_GetCircularInformation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the building's circular information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingCircularInformation"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{id}/process": {
      "post": {
        "tags": [
          "Building"
        ],
        "summary": "Schedules the building for processing, recalculates all data",
        "operationId": "Building_RecalculateBuilding",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The processing was accepted for generation"
          }
        }
      }
    },
    "/api/v3.0/building/{id}/exportpassport": {
      "post": {
        "tags": [
          "Building"
        ],
        "summary": "Schedules the generation of a PDF building passport",
        "operationId": "Building_CreatePdfPassport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept-language",
            "in": "header",
            "description": "The culture to use for the request",
            "schema": {
              "$ref": "#/components/schemas/AcceptLanguage"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The pdf passport was accepted for generation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{id}/exportexcelpassport": {
      "post": {
        "tags": [
          "Building"
        ],
        "summary": "Schedules the generation of a Excel building passport",
        "operationId": "Building_CreateExcelPassport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accept-language",
            "in": "header",
            "description": "The culture to use for the request",
            "schema": {
              "$ref": "#/components/schemas/AcceptLanguage"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The excel passport was accepted for generation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{id}/batchactivate": {
      "post": {
        "tags": [
          "Building"
        ],
        "summary": "Activate multiple files on a building",
        "operationId": "Building_BatchActiveAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The files are activated and calculation is started."
          }
        }
      }
    },
    "/api/v3.0/building/{id}/images": {
      "get": {
        "tags": [
          "Building"
        ],
        "summary": "Get the buildingimages",
        "operationId": "Building_GetImagesAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of images",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Building"
        ],
        "summary": "Adds an image to a building",
        "operationId": "Building_AddImageAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The buildingimage was successfully added."
          }
        }
      }
    },
    "/api/v3.0/building/{id}/images/{fileName}": {
      "delete": {
        "tags": [
          "Building"
        ],
        "summary": "Deleted an image from a building",
        "operationId": "Building_DeleteImageAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "The image name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The buildingimage was successfully deleted."
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files": {
      "get": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Gets all building files",
        "operationId": "BuildingFile_GetFiles",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return all building files.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingFileResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Adds a building file",
        "operationId": "BuildingFile_AddFile",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The building file was created and the location of the resource will be returned in the 'location' header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}": {
      "get": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Gets a building file by its identifier",
        "operationId": "BuildingFile_GetFileById",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the building file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Delete a building file",
        "operationId": "BuildingFile_DeleteFile",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The building was successfully deleted."
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}/status": {
      "get": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Gets a building file status by its identifier",
        "operationId": "BuildingFile_GetStatusById",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the building file status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}/download": {
      "get": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Gets a download url for the building file",
        "operationId": "BuildingFile_Download",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the download url.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}/active": {
      "post": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Activates or deactivates a building file",
        "operationId": "BuildingFile_SetActive",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The active-status of the building file was updated and the building file will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}/setimporting": {
      "post": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Sets the status of a file to 'importing', so element can be added or updated can be made.",
        "operationId": "BuildingFile_SetImporting",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The building file was set to 'importing', no content will be returned."
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}/startrefinement": {
      "post": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Starts the refinement of a building file.",
        "operationId": "BuildingFile_StartRefinement",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The refinement of the building file was started and the location to fetch it's status can be found in the header."
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{id}/upload/{fileName}": {
      "post": {
        "tags": [
          "BuildingFile"
        ],
        "summary": "Uploads a building file.",
        "operationId": "BuildingFile_UploadFile",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "The file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The building file was successfully uploaded, and scheduled for further processing."
          },
          "202": {
            "description": "The building file was successfully uploaded."
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{fileId}/elements": {
      "get": {
        "tags": [
          "BuildingFileElement"
        ],
        "summary": "Gets a building file's elements",
        "description": "This API is ODATA enabled, the following filters can be used:\r\n\r\n* $select\r\n* $filter\r\n* $skip\r\n* $top\r\n            \r\n[READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)",
        "operationId": "BuildingFileElement_GetElements",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the building file element.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingFileElementResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BuildingFileElement"
        ],
        "summary": "Create a new building file element",
        "operationId": "BuildingFileElement_AddElement",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileElementRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileElementRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileElementRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The building file element was created and the location of the resource will be returned in the 'location' header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileElementResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{fileId}/elements/{id}": {
      "get": {
        "tags": [
          "BuildingFileElement"
        ],
        "summary": "Gets a building file element",
        "operationId": "BuildingFileElement_GetElementById",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The element identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the building file element.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileElementResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BuildingFileElement"
        ],
        "summary": "Updated an existing building file element",
        "operationId": "BuildingFileElement_UpdateElement",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The element identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileElementRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileElementRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuildingFileElementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The building file element was replaced in its entirety and the result will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingFileElementResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BuildingFileElement"
        ],
        "summary": "Deletes an existing building file element",
        "operationId": "BuildingFileElement_DeleteElement",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The element identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The building file element was successfully deleted."
          }
        }
      }
    },
    "/api/v3.0/building/{buildingId}/files/{fileId}/elements/batch": {
      "post": {
        "tags": [
          "BuildingFileElement"
        ],
        "summary": "Batch: upsert (insert or update) multiple new building file elements (max 500)",
        "operationId": "BuildingFileElement_UpsertElements",
        "parameters": [
          {
            "name": "buildingId",
            "in": "path",
            "description": "The building identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BuildingFileElementRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BuildingFileElementRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BuildingFileElementRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The building file elements are created or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementBatchResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/folder": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Gets all folders",
        "operationId": "Folder_GetFolders",
        "responses": {
          "200": {
            "description": "The available folders for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folder"
        ],
        "summary": "Create a new folder",
        "operationId": "Folder_AddFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The folder was created and the location of the resource will be returned in the 'location' header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/folder/{id}": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Gets a portfolio by its identifier",
        "operationId": "Folder_GetFolderById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The folder identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and will return the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Folder"
        ],
        "summary": "Replaces a folder",
        "operationId": "Folder_UpdateFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The folder identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The folder was replaced in its entirety and the result will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/system/classificationmethods": {
      "get": {
        "tags": [
          "SystemSettings"
        ],
        "summary": "Gets the available classification methods",
        "operationId": "SystemSettings_GetClassificationMethods",
        "responses": {
          "200": {
            "description": "The classification methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/system/buildingusages": {
      "get": {
        "tags": [
          "SystemSettings"
        ],
        "summary": "Gets the available building usages",
        "operationId": "SystemSettings_GetBuildingUsages",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "The culture to use for the request",
            "schema": {
              "$ref": "#/components/schemas/AcceptLanguage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The building usages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3.0/system/materialfamilies": {
      "get": {
        "tags": [
          "SystemSettings"
        ],
        "summary": "Gets the available material families",
        "operationId": "SystemSettings_GetMaterialClassifications",
        "parameters": [
          {
            "name": "accept-language",
            "in": "header",
            "description": "The culture to use for the request",
            "schema": {
              "$ref": "#/components/schemas/AcceptLanguage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The material family classifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MaterialFamily"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptLanguage": {
        "title": "accept-language",
        "enum": [
          "en",
          "nl",
          "fr",
          "de"
        ],
        "type": "string",
        "description": "The culture to use for the request",
        "default": "en"
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The account identifier",
            "format": "uuid",
            "readOnly": true,
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "The account name",
            "nullable": true,
            "example": "Madaster Service B.V."
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          }
        },
        "description": "The account information."
      },
      "AccountType": {
        "enum": [
          "VerifiedDatabase",
          "Supplier",
          "General",
          "Private"
        ],
        "type": "string",
        "description": "The account type.",
        "x-ms-enum": {
          "name": "AccountType",
          "modelAsString": false,
          "values": [
            {
              "name": "VerifiedDatabase",
              "value": "VerifiedDatabase"
            },
            {
              "name": "Supplier",
              "value": "Supplier"
            },
            {
              "name": "General",
              "value": "General"
            },
            {
              "name": "Private",
              "value": "Private"
            }
          ]
        }
      },
      "BrandLayerMatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the matched brand layer.",
            "nullable": true
          }
        },
        "description": "A brand layer match."
      },
      "BuildingCircularInformation": {
        "type": "object",
        "properties": {
          "circularityConstructionPhase": {
            "type": "number",
            "description": "The use of non-virgin materials during the construction phase.",
            "format": "double"
          },
          "circularityUsagePhase": {
            "type": "number",
            "description": "The utility of the building.",
            "format": "double"
          },
          "circularityEndOfLifePhase": {
            "type": "number",
            "description": "The percentage of the content that is recoverable during the end-of-life phase.",
            "format": "double"
          },
          "ciScoreBuilding": {
            "type": "number",
            "description": "The combined CI score of the building using the circularity of the phases.",
            "format": "double"
          },
          "correctionUnknownMaterials": {
            "type": "number",
            "description": "The applicable correction for the amount of elements that have a known material.",
            "format": "double"
          },
          "madasterCiScore": {
            "type": "number",
            "description": "The final Madaster CI score, taking into account the corrections on the CI score.",
            "format": "double"
          }
        },
        "description": "Circular information about a building."
      },
      "BuildingFileElementRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the element",
            "example": "1234567890"
          },
          "name": {
            "type": "string",
            "description": "The name of the element",
            "nullable": true
          },
          "materialName": {
            "type": "string",
            "description": "The name of the element",
            "nullable": true,
            "example": "Concrete"
          },
          "materialId": {
            "type": "string",
            "description": "The id of the mapped material/product",
            "format": "uuid",
            "nullable": true
          },
          "typeName": {
            "type": "string",
            "description": "The type name of the element",
            "nullable": true
          },
          "elementClass": {
            "type": "string",
            "description": "The element class of the element",
            "nullable": true,
            "example": "IfcWall"
          },
          "volume": {
            "type": "number",
            "description": "The volume of the element",
            "format": "double"
          },
          "area": {
            "type": "number",
            "description": "The area of the element",
            "format": "double"
          },
          "height": {
            "type": "number",
            "description": "The height of the element",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "The width of the element",
            "format": "double"
          },
          "length": {
            "type": "number",
            "description": "The length of the element",
            "format": "double"
          },
          "phaseLookup": {
            "type": "string",
            "description": "The building process phase lookup for the element, this value will be used to match to a phase",
            "nullable": true
          },
          "classificationLookup": {
            "type": "string",
            "description": "The classification lookup for the element, this value will be used to match to a classification",
            "nullable": true
          },
          "floor": {
            "type": "string",
            "description": "The floor of the element",
            "nullable": true
          }
        },
        "description": "A request for a building file element."
      },
      "BuildingFileElementResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the mark.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name.",
            "nullable": true
          },
          "buildingFileId": {
            "type": "string",
            "description": "Gets or sets the building file identifier.",
            "format": "uuid"
          },
          "materialName": {
            "type": "string",
            "description": "Gets or sets the name of the element.",
            "nullable": true
          },
          "typeName": {
            "type": "string",
            "description": "Gets or sets the name of the type.",
            "nullable": true
          },
          "elementClass": {
            "type": "string",
            "description": "Gets or sets the element class.",
            "nullable": true
          },
          "volume": {
            "type": "number",
            "description": "Gets or sets the volume.",
            "format": "double"
          },
          "area": {
            "type": "number",
            "description": "Gets or sets the area.",
            "format": "double"
          },
          "height": {
            "type": "number",
            "description": "Gets or sets the height.",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Gets or sets the width.",
            "format": "double"
          },
          "length": {
            "type": "number",
            "description": "Gets or sets the length.",
            "format": "double"
          },
          "mapping": {
            "$ref": "#/components/schemas/Mapping"
          },
          "phaseMatch": {
            "$ref": "#/components/schemas/PhaseMatch"
          },
          "brandLayerMatch": {
            "$ref": "#/components/schemas/BrandLayerMatch"
          },
          "classificationMatch": {
            "$ref": "#/components/schemas/ClassificationMatch"
          },
          "phaseLookup": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the building process phase lookups.",
            "nullable": true
          },
          "classificationLookup": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the classification (NL/SfB) lookups.",
            "nullable": true
          },
          "floor": {
            "type": "string",
            "description": "Gets or sets the floor name.",
            "nullable": true
          }
        },
        "description": "A response for a building file element."
      },
      "BuildingFileRequest": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BuildingRequestFileType"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags for the building file",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the building file",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "The time of creation of the IFC file (from header)",
            "format": "date-time",
            "nullable": true
          },
          "preferredDatabaseIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The identifiers of the material databases to use for automatic mapping, in their preferred order",
            "nullable": true
          },
          "classificationTypeId": {
            "type": "string",
            "description": "The ifc file classification (call /api/v3.0/system/classificationmethods, to retrieve possible values)",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "BuildingFileResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the building identifier.",
            "format": "uuid"
          },
          "buildingId": {
            "type": "string",
            "description": "Gets or sets the building identifier.",
            "format": "uuid"
          },
          "isActive": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the buildingfile will be included in the building data."
          },
          "isDirty": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the file is dirty."
          },
          "fileName": {
            "type": "string",
            "description": "Gets or sets the name of the file.",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "description": "Get or sets the size of the file in bytes.",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/BuildingFileStatuses"
          },
          "type": {
            "$ref": "#/components/schemas/BuildingFileType"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Gets or sets the last modified date for the building file.",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the tags for the building file.",
            "nullable": true
          },
          "validation": {
            "$ref": "#/components/schemas/BuildingFileValidation"
          },
          "classificationTypeId": {
            "type": "string",
            "description": "The ifc file classification",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "BuildingFileStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BuildingFileStatuses"
          },
          "elementProcessedCount": {
            "type": "integer",
            "description": "Gets or sets the total processed elements (imported or refined).",
            "format": "int32"
          },
          "elementCount": {
            "type": "integer",
            "description": "Gets or sets the total elements.",
            "format": "int32"
          },
          "statusMessage": {
            "type": "string",
            "description": "Gets or sets the import or refinement status message.",
            "nullable": true
          }
        }
      },
      "BuildingFileStatuses": {
        "enum": [
          "Error",
          "Uploaded",
          "Refined",
          "Mapped",
          "Refining",
          "Mapping",
          "Creating",
          "Importing",
          "Imported",
          "UnknownImportFile"
        ],
        "type": "string",
        "description": "The building file status enum.",
        "x-ms-enum": {
          "name": "BuildingFileStatuses",
          "modelAsString": false,
          "values": [
            {
              "name": "Error",
              "value": "Error"
            },
            {
              "name": "Uploaded",
              "value": "Uploaded"
            },
            {
              "name": "Refined",
              "value": "Refined"
            },
            {
              "name": "Mapped",
              "value": "Mapped"
            },
            {
              "name": "Refining",
              "value": "Refining"
            },
            {
              "name": "Mapping",
              "value": "Mapping"
            },
            {
              "name": "Creating",
              "value": "Creating"
            },
            {
              "name": "Importing",
              "value": "Importing"
            },
            {
              "name": "Imported",
              "value": "Imported"
            },
            {
              "name": "UnknownImportFile",
              "value": "UnknownImportFile"
            }
          ]
        }
      },
      "BuildingFileType": {
        "enum": [
          "Source",
          "Information",
          "PassportPdf",
          "PassportExcel"
        ],
        "type": "string",
        "description": "The building file type enum.",
        "x-ms-enum": {
          "name": "BuildingFileType",
          "modelAsString": false,
          "values": [
            {
              "name": "Source",
              "value": "Source"
            },
            {
              "name": "Information",
              "value": "Information"
            },
            {
              "name": "PassportPdf",
              "value": "PassportPdf"
            },
            {
              "name": "PassportExcel",
              "value": "PassportExcel"
            }
          ]
        }
      },
      "BuildingFileValidation": {
        "type": "object",
        "properties": {
          "percentageClassificationAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have an assigned classifications, counted by number of elements",
            "format": "double"
          },
          "percentageClassificationAssignedByVolume": {
            "type": "number",
            "description": "The percentage of elements that have an assigned classifications, counted by volume of elements",
            "format": "double"
          },
          "percentageVolumeBaseQuantityAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a volume base quantity, counted by number of elements",
            "format": "double"
          },
          "percentageAreaBaseQuantityAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have an area base quantity, counted by number of elements",
            "format": "double"
          },
          "percentageLengthBaseQuantityAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a length base quantity, counted by number of elements",
            "format": "double"
          },
          "percentageBaseQuantitiesAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have base quantity information, counted by number of elements",
            "format": "double"
          },
          "percentageMaterialSpecifiedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a material specified, counted by number of elements",
            "format": "double"
          },
          "percentageMaterialSpecifiedByVolume": {
            "type": "number",
            "description": "The percentage of elements that have a material specified, counted by volume of elements",
            "format": "double"
          },
          "percentageElementsWithKnownMassByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a known mass, counted by number of elements",
            "format": "double"
          },
          "percentageElementsMappedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have been mapped to an element, counted by number of elements",
            "format": "double"
          },
          "percentageElementsMappedByVolume": {
            "type": "number",
            "description": "The percentage of elements that have been mapped to an element, counted by volume of elements",
            "format": "double",
            "deprecated": true
          }
        },
        "description": "Validation data about a building file."
      },
      "BuildingPhase": {
        "enum": [
          "New",
          "Existing",
          "Renovation",
          "Demolition"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "BuildingPhase",
          "modelAsString": false,
          "values": [
            {
              "name": "New",
              "value": "New"
            },
            {
              "name": "Existing",
              "value": "Existing"
            },
            {
              "name": "Renovation",
              "value": "Renovation"
            },
            {
              "name": "Demolition",
              "value": "Demolition"
            }
          ]
        }
      },
      "BuildingRequest": {
        "required": [
          "buildingUsage",
          "completionDate",
          "folderId",
          "grossSurfaceArea",
          "materialClassificationTypeId",
          "name",
          "phase"
        ],
        "type": "object",
        "properties": {
          "folderId": {
            "type": "string",
            "description": "The identifier of the parent folder",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the building"
          },
          "phase": {
            "$ref": "#/components/schemas/BuildingPhase"
          },
          "cadastralDesignation": {
            "type": "string",
            "description": "The cadastral designation of the building",
            "nullable": true
          },
          "cadastralArea": {
            "type": "integer",
            "description": "The cadastral area of the building in square meters",
            "format": "int32"
          },
          "parcelnumber": {
            "type": "string",
            "description": "The parcel number of the building",
            "nullable": true
          },
          "publicLawRestriction": {
            "type": "string",
            "description": "The restrictions of public law in place for the building",
            "nullable": true
          },
          "completionDate": {
            "type": "string",
            "description": "The completion date of the building",
            "format": "date-time"
          },
          "lastRenovationDate": {
            "type": "string",
            "description": "The last renovation date of the building",
            "format": "date-time",
            "nullable": true
          },
          "addressStreet": {
            "type": "string",
            "description": "The street that the building is situated on",
            "nullable": true
          },
          "addressHousenumber": {
            "type": "string",
            "description": "The housenumber in the street that the building is situated on",
            "nullable": true
          },
          "addressHousenumberAddition": {
            "type": "string",
            "description": "The addition of the housenumber in the street that the building is situated on",
            "nullable": true
          },
          "addressZipcode": {
            "type": "string",
            "description": "The zipcode of the location that the building is situated on",
            "nullable": true
          },
          "addressCity": {
            "type": "string",
            "description": "The city that the building is situated in",
            "nullable": true
          },
          "addressCountry": {
            "type": "string",
            "description": "The identifier of the country that the building is situated in",
            "nullable": true
          },
          "buildingUsage": {
            "minLength": 1,
            "type": "string",
            "description": "The current designation of the building (call /api/v3.0/system/buildingusages, to retrieve possible values)"
          },
          "buildingUsageOtherDescription": {
            "type": "string",
            "description": "The designation description of the building, in case buildingUsage is other.",
            "nullable": true
          },
          "grossSurfaceArea": {
            "type": "number",
            "description": "The gross surface area of the building",
            "format": "double",
            "nullable": true
          },
          "energyLabel": {
            "type": "string",
            "description": "The current energy label of the building",
            "nullable": true
          },
          "beng1": {
            "type": "number",
            "description": "Energiebehoefte (BENG 1) - kWh/m2.jr",
            "format": "double",
            "nullable": true
          },
          "beng2": {
            "type": "number",
            "description": "Primaire fossiele energie (BENG 2) - kWh/m2.jr",
            "format": "double",
            "nullable": true
          },
          "beng3": {
            "type": "number",
            "description": "Hernieuwbare energie (BENG 3) - %",
            "format": "double",
            "nullable": true
          },
          "rto": {
            "type": "number",
            "description": "Risico temperatuuroverschrijding (T0-juli)",
            "format": "double",
            "nullable": true
          },
          "energyIndex": {
            "type": "number",
            "description": "The energy index",
            "format": "double",
            "nullable": true
          },
          "expectedLifespan": {
            "type": "integer",
            "description": "The expected lifespan for the building",
            "format": "int32",
            "nullable": true
          },
          "expectedLifespanStructure": {
            "type": "integer",
            "description": "The expected lifespan building for the structure brand layer",
            "format": "int32",
            "nullable": true
          },
          "expectedLifespanSkin": {
            "type": "integer",
            "description": "The expected lifespan building for the skin brand layer",
            "format": "int32",
            "nullable": true
          },
          "expectedLifespanServices": {
            "type": "integer",
            "description": "The expected lifespan for the services brand layer",
            "format": "int32",
            "nullable": true
          },
          "expectedLifespanSpacePlan": {
            "type": "integer",
            "description": "The expected lifespan for the space plan brand layer",
            "format": "int32",
            "nullable": true
          },
          "expectedLifespanStuff": {
            "type": "integer",
            "description": "The expected lifespan for the stuff brand layer",
            "format": "int32",
            "nullable": true
          },
          "breeamLabel": {
            "type": "integer",
            "description": "The BREEAM label",
            "format": "int32"
          },
          "gprScoreEnergy": {
            "type": "number",
            "description": "The GPR-energy score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreHealth": {
            "type": "number",
            "description": "The GPR-health score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreFutureValue": {
            "type": "number",
            "description": "The GPR-future score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreUsageQuality": {
            "type": "number",
            "description": "The GPR-usage quality score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreEnvironment": {
            "type": "number",
            "description": "The GPR-environment score of the building",
            "format": "double",
            "nullable": true
          },
          "mpgLabel": {
            "type": "number",
            "description": "The MPG-score of the building",
            "format": "double",
            "nullable": true
          },
          "leedLabel": {
            "type": "string",
            "description": "The LEED label of the building",
            "nullable": true
          },
          "wellScoreBuilding": {
            "type": "integer",
            "description": "The WELL score of the building",
            "format": "int32",
            "nullable": true
          },
          "wellScoreInterior": {
            "type": "integer",
            "description": "The WELL score of the interior",
            "format": "int32",
            "nullable": true
          },
          "wellScoreCoreAndShell": {
            "type": "integer",
            "description": "The WELL score of the core and shell",
            "format": "int32",
            "nullable": true
          },
          "classificationType": {
            "type": "string",
            "description": "The classification is moved to buildingfile to allow multiple classifications.",
            "format": "uuid",
            "nullable": true,
            "deprecated": true
          },
          "materialClassificationTypeId": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the material classification type of the building (call /api/v3.0/system/materialfamilies, to retrieve possible values)"
          }
        }
      },
      "BuildingRequestFileType": {
        "enum": [
          "Source",
          "Information"
        ],
        "type": "string",
        "description": "The building file type enum.",
        "x-ms-enum": {
          "name": "BuildingRequestFileType",
          "modelAsString": false,
          "values": [
            {
              "name": "Source",
              "value": "Source"
            },
            {
              "name": "Information",
              "value": "Information"
            }
          ]
        }
      },
      "BuildingResponse": {
        "required": [
          "materialClassificationTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of the building",
            "format": "uuid"
          },
          "folderId": {
            "type": "string",
            "description": "The identifier of the parent folder",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the building",
            "nullable": true
          },
          "cadastralDesignation": {
            "type": "string",
            "description": "The cadastral designation of the building",
            "nullable": true
          },
          "cadastralArea": {
            "type": "integer",
            "description": "The cadastral area of the building in square meters",
            "format": "int32"
          },
          "parcelnumber": {
            "type": "string",
            "description": "The parcel number of the building",
            "nullable": true
          },
          "publicLawRestriction": {
            "type": "string",
            "description": "The restrictions of public law in place for the building",
            "nullable": true
          },
          "completionDate": {
            "type": "string",
            "description": "The completion date of the building",
            "format": "date-time"
          },
          "lastRenovationDate": {
            "type": "string",
            "description": "The last renovation date of the building",
            "format": "date-time",
            "nullable": true
          },
          "addressStreet": {
            "type": "string",
            "description": "The street that the building is situated on",
            "nullable": true
          },
          "addressHousenumber": {
            "type": "string",
            "description": "The housenumber in the street that the building is situated on",
            "nullable": true
          },
          "addressHousenumberAddition": {
            "type": "string",
            "description": "The addition of the housenumber in the street that the building is situated on",
            "nullable": true
          },
          "addressZipcode": {
            "type": "string",
            "description": "The zipcode of the location that the building is situated on",
            "nullable": true
          },
          "addressCity": {
            "type": "string",
            "description": "The city that the building is situated in",
            "nullable": true
          },
          "addressCountry": {
            "type": "string",
            "description": "The identifier of the country that the building is situated in",
            "nullable": true
          },
          "buildingUsage": {
            "type": "string",
            "description": "The current designation of the building",
            "nullable": true
          },
          "buildingUsageOtherDescription": {
            "type": "string",
            "description": "The designation of the building, when buildingUsage is other",
            "nullable": true
          },
          "grossSurfaceArea": {
            "type": "number",
            "description": "The gross surface area of the building",
            "format": "double"
          },
          "energyLabel": {
            "type": "string",
            "description": "The current energy label of the building",
            "nullable": true
          },
          "beng1": {
            "type": "number",
            "description": "Energiebehoefte (BENG 1) - kWh/m2.jr",
            "format": "double",
            "nullable": true
          },
          "beng2": {
            "type": "number",
            "description": "Primaire fossiele energie (BENG 2) - kWh/m2.jr",
            "format": "double",
            "nullable": true
          },
          "beng3": {
            "type": "number",
            "description": "Hernieuwbare energie (BENG 3) - %",
            "format": "double",
            "nullable": true
          },
          "rto": {
            "type": "number",
            "description": "Risico temperatuuroverschrijding (T0-juli)",
            "format": "double",
            "nullable": true
          },
          "energyIndex": {
            "type": "number",
            "description": "The energy index",
            "format": "double",
            "nullable": true
          },
          "expectedLifespan": {
            "type": "integer",
            "description": "The expected lifespan for the building",
            "format": "int32"
          },
          "expectedLifespanStructure": {
            "type": "integer",
            "description": "The expected lifespan building for the structure brand layer",
            "format": "int32"
          },
          "expectedLifespanSkin": {
            "type": "integer",
            "description": "The expected lifespan building for the skin brand layer",
            "format": "int32"
          },
          "expectedLifespanServices": {
            "type": "integer",
            "description": "The expected lifespan for the services brand layer",
            "format": "int32"
          },
          "expectedLifespanSpacePlan": {
            "type": "integer",
            "description": "The expected lifespan for the space plan brand layer",
            "format": "int32"
          },
          "expectedLifespanStuff": {
            "type": "integer",
            "description": "The expected lifespan for the stuff brand layer",
            "format": "int32"
          },
          "breeamLabel": {
            "type": "integer",
            "description": "The BREEAM label",
            "format": "int32"
          },
          "gprScoreEnergy": {
            "type": "number",
            "description": "The GPR-energy score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreHealth": {
            "type": "number",
            "description": "The GPR-health score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreFutureValue": {
            "type": "number",
            "description": "The GPR-future score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreUsageQuality": {
            "type": "number",
            "description": "The GPR-usage quality score of the building",
            "format": "double",
            "nullable": true
          },
          "gprScoreEnvironment": {
            "type": "number",
            "description": "The GPR-environment score of the building",
            "format": "double",
            "nullable": true
          },
          "mpgLabel": {
            "type": "number",
            "description": "The MPG-score of the building",
            "format": "double"
          },
          "mpgLabelManual": {
            "type": "number",
            "description": "The manual MPG-score of the building",
            "format": "double"
          },
          "mpgLabelIndicative": {
            "type": "number",
            "description": "The indicative MPG-score of the building",
            "format": "double"
          },
          "leedLabel": {
            "type": "string",
            "description": "The LEED label of the building",
            "nullable": true
          },
          "wellScoreBuilding": {
            "type": "integer",
            "description": "The WELL score of the building",
            "format": "int32",
            "nullable": true
          },
          "wellScoreInterior": {
            "type": "integer",
            "description": "The WELL score of the interior",
            "format": "int32",
            "nullable": true
          },
          "wellScoreCoreAndShell": {
            "type": "integer",
            "description": "The WELL score of the core and shell",
            "format": "int32",
            "nullable": true
          },
          "isDirty": {
            "type": "boolean",
            "description": "Indicates whether this building is dirty and thus contains data that should be updated"
          },
          "hasDirtyElements": {
            "type": "boolean",
            "description": "Indicates whether the building contains any elements that have changed"
          },
          "mostRecentBimInfo": {
            "type": "string",
            "description": "The time of the most recent BIM info change",
            "format": "date-time",
            "deprecated": true
          },
          "geoLatitude": {
            "type": "number",
            "description": "The geo latitude of the building",
            "format": "double",
            "nullable": true
          },
          "geoLongtitude": {
            "type": "number",
            "description": "The geo longtitude of the building",
            "format": "double",
            "nullable": true
          },
          "phaseType": {
            "type": "string",
            "description": "The identifier of the phase type of the buildinge",
            "format": "uuid"
          },
          "classificationType": {
            "type": "string",
            "description": "The classification is moved to the buildingfile to allow multiple classifications per building.",
            "format": "uuid",
            "deprecated": true
          },
          "materialClassificationTypeId": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the material classification type of the building (call /api/v3.0/system/materialfamilies, to retrieve possible values)"
          }
        }
      },
      "BuildingValidation": {
        "type": "object",
        "properties": {
          "percentageClassificationAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have an assigned classifications, counted by number of elements",
            "format": "double"
          },
          "percentageClassificationAssignedByVolume": {
            "type": "number",
            "description": "The percentage of elements that have an assigned classifications, counted by volume of elements",
            "format": "double"
          },
          "percentageVolumeBaseQuantityAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a volume base quantity, counted by number of elements",
            "format": "double"
          },
          "percentageAreaBaseQuantityAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have an area base quantity, counted by number of elements",
            "format": "double"
          },
          "percentageLengthBaseQuantityAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a length base quantity, counted by number of elements",
            "format": "double"
          },
          "percentageBaseQuantitiesAssignedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have base quantity information, counted by number of elements",
            "format": "double"
          },
          "percentageMaterialSpecifiedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a material specified, counted by number of elements",
            "format": "double"
          },
          "percentageMaterialSpecifiedByVolume": {
            "type": "number",
            "description": "The percentage of elements that have a material specified, counted by volume of elements",
            "format": "double"
          },
          "percentageElementsWithKnownMassByNumber": {
            "type": "number",
            "description": "The percentage of elements that have a known mass, counted by number of elements",
            "format": "double"
          },
          "percentageElementsMappedByNumber": {
            "type": "number",
            "description": "The percentage of elements that have been mapped to an element, counted by number of elements",
            "format": "double"
          },
          "percentageElementsMappedByVolume": {
            "type": "number",
            "description": "The percentage of elements that have been mapped to an element, counted by volume of elements",
            "format": "double"
          }
        },
        "description": "Validation data about a building."
      },
      "ClassificationMatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the matched classification.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Gets or sets the code of the matched classification.",
            "nullable": true
          }
        },
        "description": "A classification match."
      },
      "ClassificationMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/MultiLingualString"
          }
        },
        "description": "A classification method."
      },
      "ElementBatchResult": {
        "type": "object",
        "properties": {
          "failures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ElementType": {
        "enum": [
          "Material",
          "LegacyMaterial",
          "VolumeProduct",
          "QuantityProduct",
          "AreaProduct",
          "LengthProduct"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ElementType",
          "modelAsString": false,
          "values": [
            {
              "name": "Material",
              "value": "Material"
            },
            {
              "name": "LegacyMaterial",
              "value": "LegacyMaterial"
            },
            {
              "name": "VolumeProduct",
              "value": "VolumeProduct"
            },
            {
              "name": "QuantityProduct",
              "value": "QuantityProduct"
            },
            {
              "name": "AreaProduct",
              "value": "AreaProduct"
            },
            {
              "name": "LengthProduct",
              "value": "LengthProduct"
            }
          ]
        }
      },
      "FileDownloadResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The download url for a file",
            "nullable": true
          },
          "expirationDateTime": {
            "type": "string",
            "description": "The expiration date and time of the url",
            "format": "date-time"
          }
        }
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The file name",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The download url",
            "nullable": true
          }
        }
      },
      "FolderRequest": {
        "required": [
          "foldertypeId",
          "name",
          "parentId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The folder name",
            "nullable": true,
            "example": "Portfolio 1"
          },
          "description": {
            "type": "string",
            "description": "The folder description",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "The parent folder identifier (is a folderId or accountId)",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "foldertypeId": {
            "type": "string",
            "description": "The foldertype identifier",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "owner": {
            "type": "string",
            "description": "The owner, used in the passports",
            "nullable": true,
            "example": "Zander Ecke"
          }
        }
      },
      "FolderResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The folder identifier",
            "format": "uuid",
            "readOnly": true,
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "The folder name",
            "nullable": true,
            "example": "Portfolio 1"
          },
          "description": {
            "type": "string",
            "description": "The folder description",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "The parent folder identifier (is a folderId or accountId)",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "foldertypeId": {
            "type": "string",
            "description": "The foldertype identifier",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        }
      },
      "FolderType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The foldertype identifier",
            "format": "uuid",
            "readOnly": true,
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "$ref": "#/components/schemas/MultiLingualString"
          },
          "pluralName": {
            "$ref": "#/components/schemas/MultiLingualString"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLingualString"
          },
          "allowbuildings": {
            "type": "boolean",
            "description": "Are buildings allowed in folder based on this folder type"
          },
          "hasAddress": {
            "type": "boolean",
            "description": "Specifies if folders based on this type can be annotated with an address"
          },
          "hasSpatialCoordinates": {
            "type": "boolean",
            "description": "Specifies if folders based on this type can be annotated with coordinates"
          },
          "allowedSubFolderTypeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which foldertypes are allowed as subfolders",
            "nullable": true
          }
        },
        "description": "The folder type."
      },
      "Mapping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/ElementType"
          }
        },
        "description": "A mapping."
      },
      "MaterialFamily": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The classification identifier",
            "nullable": true,
            "example": "madaster"
          },
          "name": {
            "type": "string",
            "description": "The classification name",
            "nullable": true,
            "example": "Madaster"
          }
        }
      },
      "MultiLingualString": {
        "title": "MultiLingualString",
        "type": "object",
        "properties": {
          "nl": {
            "type": "string",
            "nullable": true
          },
          "en": {
            "type": "string",
            "nullable": true
          },
          "de": {
            "type": "string",
            "nullable": true
          },
          "fr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "string"
        },
        "description": "A multilingual string",
        "example": {
          "nl": "nederlandse waarde",
          "en": "english value"
        }
      },
      "PhaseMatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the matched phase.",
            "nullable": true
          }
        },
        "description": "A phase match."
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "description": "Token Authorization",
        "name": "X-API-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": [ ]
    }
  ],
  "tags": [
    {
      "name": "Account",
      "description": "All actions related to the account entity."
    },
    {
      "name": "Building",
      "description": "All actions related to buildings."
    },
    {
      "name": "BuildingFile",
      "description": "All actions related to building files (ifc/excel/other)."
    },
    {
      "name": "BuildingFileElement",
      "description": "All actions related to building file elements (ifc elements)."
    },
    {
      "name": "Folder",
      "description": "All actions related to folders."
    },
    {
      "name": "SystemSettings",
      "description": "All actions related to the system wide data."
    }
  ]
}